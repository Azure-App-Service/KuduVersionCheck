@functions {
    Dictionary<string, string> props = new Dictionary<string, string>();
    string siteExtFolder = @"D:\Program Files (x86)\SiteExtensions";
    string nodeFolder = @"D:\Program Files (x86)\nodejs";
    string npmFolder = @"D:\Program Files (x86)\npm";
    string goFolder = @"D:\Program Files\Go";

    class FancyVersion : IComparable<FancyVersion>
    {
        public FancyVersion(string ver)
        {
            VersionString = ver;
        }

        public string VersionString { get; set; }

        public int CompareTo(FancyVersion other)
        {
            try
            {
                return Semver.SemVersion.Parse(VersionString).CompareTo(Semver.SemVersion.Parse(other.VersionString));
            }
            catch
            {
            }

            try
            {
                // Fall back to .net version for cases when there are 4 chunks
                return (new Version(VersionString)).CompareTo(new Version(other.VersionString));
            }
            catch
            {
                return 0;
            }
        }
    }

    void AddSiteExtension(string folderName, string name = null)
    {
        name = name ?? folderName;
        
        string extensionFolder = Path.Combine(siteExtFolder, folderName);
        if (Directory.Exists(extensionFolder))
        {
            string versionFolder = Directory.GetDirectories(extensionFolder).OrderByDescending(s => new FancyVersion(Path.GetFileName(s))).First();
            props[name] = Path.GetFileName(versionFolder);
        }
        else
        {
            props[name] = "none";
        }
    }

    string GetLatestVersionFromFolder(string folder)
    {
        try
        {
            string highestVersionFolder = Directory.GetDirectories(folder).OrderByDescending(s => new FancyVersion(Path.GetFileName(s))).First();
            return Path.GetFileName(highestVersionFolder);
        }
        catch
        {
            return "error";
        }
    }

    private long GetTotalFreeSpace(string driveName)
    {
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
            if (drive.IsReady && drive.Name == driveName)
            {
                return drive.TotalFreeSpace;
            }
        }
        return -1;
    }

    private static string FormatBytes(long bytes)
    {
        string[] Suffix = { "B", "KB", "MB", "GB", "TB" };
        int i;
        double dblSByte = bytes;
        for (i = 0; i < Suffix.Length && bytes >= 1024; i++, bytes /= 1024) 
        {
            dblSByte = bytes / 1024.0;
        }
    
        return String.Format("{0:0.##} {1}", dblSByte, Suffix[i]);
    }


    private static double GetWritePerf()
    {
        string testFilePath = Environment.ExpandEnvironmentVariables(@"%HOME%\site\FileSystemPerf.txt");
        
        var start = DateTime.Now;
        double total = 0;
        int maxIteration = 10;
        for (int i = 0; i < maxIteration; i++)
        {
            var iterationStart = DateTime.Now;
            File.WriteAllText(testFilePath, "Hello");

            double ms = (DateTime.Now - iterationStart).TotalMilliseconds;
            total += ms;
        }

        return (DateTime.Now - start).TotalMilliseconds / maxIteration;
    }
}

@{
    var assembly = System.Reflection.Assembly.Load("Microsoft.Web.Hosting, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
    var fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(assembly.Location);
    props["waws"] = fileVersionInfo.FileVersion;

    assembly = System.Reflection.Assembly.Load("Microsoft.WindowsAzure.WebSites.Diagnostics, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
    fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(assembly.Location);
    props["diag"] = fileVersionInfo.FileVersion;

    try
    {
        assembly = System.Reflection.Assembly.Load("Microsoft.Azure.Websites.StorageSdk, Version=4.1.0.0, Culture=neutral, PublicKeyToken=691e959c3809d0a1");
        props["stor41"] = "true";
    }
    catch
    {
        props["stor41"] = "false";
    }
    try
    {
        assembly = System.Reflection.Assembly.Load("Microsoft.Azure.Websites.StorageSdk, Version=4.3.0.0, Culture=neutral, PublicKeyToken=3a5db2940cfb2d9c");
        props["stor43"] = "true";
    }
    catch
    {
        props["stor43"] = "false";
    }

    //fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(@"D:\Windows\Microsoft.Net\assembly\GAC_32\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\system.web.dll");
    //props["S.W.32"] = fileVersionInfo.FileVersion.Split(' ')[0];
    //fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(@"D:\Windows\Microsoft.Net\assembly\GAC_64\System.Web\v4.0_4.0.0.0__b03f5f7f11d50a3a\system.web.dll");
    //props["S.W.64"] = fileVersionInfo.FileVersion.Split(' ')[0];;

    AddSiteExtension("Kudu");
    AddSiteExtension("Monaco");
    AddSiteExtension("MobileServicesDotNet");
    AddSiteExtension("MobileServicesNode");
    AddSiteExtension("AzureJobs");
    AddSiteExtension("MSDeploy");
    AddSiteExtension("DaaS");
    //AddSiteExtension("SecurityInsightAdmin");
    AddSiteExtension("ApiAppsGateway");
    AddSiteExtension("Zray54");
    AddSiteExtension("appidentify");

    fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(@"D:\Program Files (x86)\iisnode\iisnode.dll");
    props["iisnode"] = fileVersionInfo.FileVersion;

    props["Node"] = GetLatestVersionFromFolder(nodeFolder);
    props["npm"] = GetLatestVersionFromFolder(npmFolder);
    props["go"] = GetLatestVersionFromFolder(goFolder);

    string appHostPath = Environment.ExpandEnvironmentVariables(@"%tmp%\..\config\applicationhost.config");
    string appHostContent = File.ReadAllText(appHostPath);
    
    //props["Fx452Refs"] = File.Exists(@"D:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\Accessibility.dll").ToString();
    
    props["FreeDSpace$"] = FormatBytes(GetTotalFreeSpace(@"D:\"));

    try
    {
        props["WritePerf$"] = GetWritePerf().ToString();
    }
    catch
    {
        props["WritePerf$"] = "error";
    }

    props["4.5.1 SDK"] = (File.Exists(@"D:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\Accessibility.dll") &&
                         File.Exists(@"D:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.1\Accessibility.xml")).ToString();

    props["4.5.2 SDK"] = File.Exists(@"D:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.5.2\facades\System.Collections.dll").ToString();

    //props["UNENCODED_URL$"] = Request.ServerVariables["UNENCODED_URL"];
    
    //props["ScmSep"] = appHostContent.Contains(@"add name=""~1").ToString();
    
    //props["PHP55"] = (appHostContent.Contains(@"PHP55_via_FastCGI") && appHostContent.Contains(@"D:\Program Files (x86)\PHP\v5.5\php-cgi.exe")).ToString();

    //var info = new FileInfo(@"D:\Program Files\iisnode\interceptor.js");
    //props["interceptor"] = info.Length.ToString();

    // Time is not that useful, so yanking it
    //props["time"] = File.GetCreationTimeUtc(mwhAssembly.Location).ToString();

    Response.ContentType = "application/json";
}

@Html.Raw(Json.Encode(props))
