@functions {
    Dictionary<string, string> props = new Dictionary<string, string>();
    string siteExtFolder = @"D:\Program Files (x86)\SiteExtensions";

    class FancyVersion : IComparable<FancyVersion>
    {
        public FancyVersion(string ver)
        {
            VersionString = ver;
        }

        public string VersionString { get; set; }

        public int CompareTo(FancyVersion other)
        {
            try
            {
                return Semver.SemVersion.Parse(VersionString).CompareTo(Semver.SemVersion.Parse(other.VersionString));
            }
            catch
            {
            }

            try
            {
                // Fall back to .net version for cases when there are 4 chunks
                return (new Version(VersionString)).CompareTo(new Version(other.VersionString));
            }
            catch
            {
                return 0;
            }
        }
    }

    void AddSiteExtension(string folderName, string name = null)
    {
        name = name ?? folderName;
        
        string extensionFolder = Path.Combine(siteExtFolder, folderName);
        if (Directory.Exists(extensionFolder))
        {
            string versionFolder = Directory.GetDirectories(extensionFolder).OrderByDescending(s => new FancyVersion(Path.GetFileName(s))).First();
            props[name] = Path.GetFileName(versionFolder);
        }
        else
        {
            props[name] = "none";
        }
    }
}

@{
    var mwhAssembly = System.Reflection.Assembly.Load("Microsoft.Web.Hosting, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35");
    var fileVersionInfo = System.Diagnostics.FileVersionInfo.GetVersionInfo(mwhAssembly.Location);
    props["waws"] = fileVersionInfo.FileVersion;

    AddSiteExtension("kudu");
    AddSiteExtension("Monaco");
    AddSiteExtension("MobileServicesDotNet", "Mobile.Net");
    AddSiteExtension("MobileServicesNode", "MobileNode");
    AddSiteExtension("AzureJobs");
    AddSiteExtension("MSDeploy");

    props["time"] = File.GetCreationTimeUtc(mwhAssembly.Location).ToString();

    Response.ContentType = "application/json";
}

@Html.Raw(Json.Encode(props))
